<?php

// If no arguments were provided in the command line
if (!isset($argv[1])) {
    echo '!!! No command-line arguments were provided !!!' . PHP_EOL;
    exit();
}
$arguments = restructureArgsArray($argv);

// Compare command-line arguments and execute their corresponding code
switch($argv[1]) {
    // For executing the command 'php tal7aouy serve'
    case 'serve':
        // Path to main 'index.php' file which is an entry point for our mvc app
        $pathToMainIndex = 'public/';

        // If PHP version is 8.0.0 or up, dynamically select a port to run PHP's built-in server on
        if (version_compare(phpversion(), '8.0.0') > -1) {
            exec('php -S 127.0.0.1:0 -t ' . $pathToMainIndex);
            return;
        }

        // If PHP version is less than 8.0.0, execute following code
        $port = 8080;  // Default port for PHP's built-in server
        $portLimit = 8100;
        $portIsFree = false;

        // Select a port that is free so that PHP's built-in server can be run on it
        while (!$portIsFree) {
            // If the PHP's built-in server can be run on the current port, stop the loop
            if (exec('php -S 127.0.0.1:' . $port . ' -t ' . $pathToMainIndex)) {
                $portIsFree = true;
                // Don't know which one is more useful here: 'continue' or 'break'
                continue;  // Thus, just using 'continue' here
                // break;
            }

            // Limit the iterations of the loop
            // We don't want this loop to run forever, if no port is free for use
            if ($port > $portLimit) {
                echo '!!! App failed to run. No port is free for the app to use !!!' . PHP_EOL;
                break;
            }

            $port++;
        }
        break;

    // If an invalid command-line argument is provided
    default:
        echo '!!! Invalid command line argument !!!';
        break;

}

/**
 * Re-arrange the user provided command line arguments
 * 
 * @param array $argv => Contains command-line arguments provided by the user
 * 
 * @return array $newArgsArray => Contains restructered command-line arguments
 */
function restructureArgsArray(array $args)
{
    // Remove first two 'key => value' pairs from the array as they are not really neeeded
    $args = array_slice($args, 2);

    $newArgsArray = [];

    // Divide each array element to a key pair value
    // Convert each array element to a new 'key => value' pair
    // For example, '--port=8080' to '--port' => '8080'
    foreach ($args as $arg) {
        if (strpos($arg, '=')) {
            $newArgsArray[strtok($arg, '=')] = strtok('');
            continue;
        }
        $newArgsArray[$arg] = false;
    }
    return $newArgsArray;
}

/**
 * Serve the app using the command 'php tal7aouy serve'
 * 
 * @param array $argsArray => A restructered array containing command-line arguments
 * 
 * @return null
 */

function serveTheApp(array $argsArray)
{
    $pathToMainIndex = 'public/';  // Path to the entry point of our app
    $host = '127.0.0.1';  // Default 'host' url for our app
    $port = 8080;  // Default port for our app to use
    // Possible parameters for the 'php tal7aouy serve' command
    // For example, '--port=8080', '--host=127.0.0.1'
    $possibleParams = [
        'host' => '--host',
        'port' => '--port'
    ];
         // If an invalid parameter is encountered, show the error message & stop the execution
         foreach ($argsArray as $arg => $value) {
          if (!in_array($arg, $possibleParams)) {
              throw new Exception("!!! 'php tal7aouy serve': Invalid parameter [ $arg ] !!!");
              exit;
          }
          // If no value for parameter is passed, show the error message & stop the execution
        // In future, this needs to be changed, if we introduce a new parameter that does not require a value
        if (!$value) {
          echoToConsole("!!! 'php tal7aouy serve': Invalid value for the parameter [ $arg ] !!!");
          throw new Exception("!!! 'php tal7aouy serve': Invalid value for the parameter [ $arg ] !!!");
          exit;
      }
  }

  // If the user provides a custom host url
  if (array_key_exists($possibleParams['host'], $argsArray)) {
    $host = $argsArray[$possibleParams['host']];
}
// If the user provides a custom port number
if (array_key_exists($possibleParams['port'], $argsArray)) {
    $port = $argsArray[$possibleParams['port']];
}
// If default port is free, run PHP's built-in server on it
if (exec(`php -S $host:$port -t $pathToMainIndex`)) {
    return;
}
// If PHP version is 8.0.0 or up, dynamically select a port to run PHP's built-in server on
if (version_compare(phpversion(), '8.0.0') > -1) {
    exec(`php -S $host:0 -t $pathToMainIndex`);
    return;
}
    $port++;  // Increment 'port number', as default port is not available for the use
    $portLimit = $port + 30;  // To set the limit of iterations for the while loop below
    $portIsFree = false;
    // Run PHP's built-in server on a port that is available for use
    while (!$portIsFree) {
      // If the PHP's built-in server can be run on the current port, stop the loop
      if (exec(`php -S $host:$port -t $pathToMainIndex`)) {
          $portIsFree = true;
          break;
      }

      // Limited the iterations of the loop
        // We don't want this loop to run forever if no port is available for use
        if ($port > $portLimit) {
          throw new Exception('!!! App failed to run. Ports limit exceeded. Maybe, try a different ports range !!!');
          break;
      }

      $port++;
  }
}
